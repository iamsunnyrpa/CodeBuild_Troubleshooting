This file will help you to understand how you can use temporary credentials to perform cross account actions to complete the use case. 

Assume you have to perform cross account actions while executing CodeBuild commands and you wanted to pass temporary credentials which can be used till build duration to avoid extension of exported security token.

--> You must create below json policy and att\ach it to the CodeBuild service role.

--------------------
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "VisualEditor1",
      "Effect": "Allow",
      "Action": "sts:AssumeRole",
      "Resource": "<ARN_Of_Cross_Account_Role>"
    }
  ]
}
--------------------

--> In the target account you need to create role with CodeBuild account as trust relationship and json policy.

TrustRelationship:

--------------------
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": "arn:aws:iam::$account_id:role/service-role/codebuild-service-role"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
--------------------

Json Policy:

--------------------
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "<Your_Actions>"
      ],
      "Resource": [
        "<Resource_ARN>"
      ]
    }
  ]
}
--------------------

--> Later you need to add your build commands as mentioned below.


- ASSUME_ROLE_ARN="<Cross_Account_Role_Which_Needs_To_Be_Assume>"
- TEMP_ROLE=$(aws sts assume-role --role-arn $ASSUME_ROLE_ARN --role-session-name <Session_Name>)
- export TEMP_ROLE
- export AWS_ACCESS_KEY_ID=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.AccessKeyId')
- export AWS_SECRET_ACCESS_KEY=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.SecretAccessKey')
- export AWS_SESSION_TOKEN=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.SessionToken')